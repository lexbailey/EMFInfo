#!/usr/bin/env python3
import math
from datetime import datetime


strings = [
]

def addstr(s):
    s += b'\0'
    if len(strings) == 0:
        strings.append((0, s))
        return 0
    lastpos, last_s = strings[-1]
    pos = lastpos + len(last_s)
    strings.append((pos, s))
    return pos

title = addstr(b'Test event')
venue = addstr(b'Stage A')
name = addstr(b'Talker McTalksalot')
pronouns = addstr(b'they/them')
cost = addstr(b'free')

title2 = addstr(b'Exciting workshop')
venue2 = addstr(b'Workshop C')
name2 = addstr(b'Alan!')
pronouns2 = addstr(b'he/they')
cost2 = addstr(b'\x603')


def str_id_bits():
    max_n = strings[-1][0]
    b = math.ceil(math.log2(max_n))
    return b

def tobits(num, b):
    bits = []
    for i in reversed(range(b)):
        n = 1<<i;
        if (num & n) > 0:
            bits.append(1)
        else:
            bits.append(0)
    return bits

def compact(bits):
    bytes_ = []
    while len(bits)>=8:
        chunk, bits = bits[0:8], bits[8:]
        t = 0
        for i in range(8):
            t = (t << 1) | chunk[i]
        bytes_.append(t)
    return bytes(bytes_)

def make_event(f, title, venue, name, pronouns, cost, time, duration, type_, can_record):
    f.write(bytes([type_ << 6,0])) # type, can_record, time
    f.write(bytes([duration])) # one hour long event
    b = str_id_bits()
    bits = []
    bits.extend(tobits(title, b))
    bits.extend(tobits(venue, b))
    bits.extend(tobits(name, b))
    bits.extend(tobits(pronouns, b))
    bits.extend(tobits(cost, b))
    bytes_ = compact(bits)
    f.write(bytes_)
    f.write(bytes([0,0])) # a bit of padding for the description pointer, currently ignored

with open("evlist.bin", 'wb+') as f:
    f.write(bytes([str_id_bits()]))
    make_event(f, title, venue, name, pronouns, cost, 0, 60, 0, 1)
    make_event(f, title2, venue2, name2, pronouns2, cost2, 120, 120, 2, 0)

with open("strngs.bin", 'wb+') as f:
    for (p,s) in strings:
        f.write(s)
