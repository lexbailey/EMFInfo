#!/usr/bin/env python3
import math
from datetime import datetime
import json
import os
import sys
from unidecode import unidecode
import argparse

p = argparse.ArgumentParser()
p.add_argument("target", choices=['PC_LINUX', 'ZXSPEC48'])
args = p.parse_args()

target = args.target


strings = [
    (0, b'\0')
]

descs = []

descr_str = {
    0:[]
}
descr_lens = {
    0:0
}

time_bits = 13

def getstr(s, ss):
    for i, es in ss:
        if s+b'\0' == es:
            return i
    assert False, f"String not found: {s}"

def maybegetstr(s, ss):
    for i, es in ss:
        if s+b'\0' == es:
            return i
    return None

def addstr(s, ss):
    if len(ss) == 0:
        ss.append((0, s+b'\0'))
        return 0
    existing = maybegetstr(s, ss)
    if existing is None:
        lastpos, last_s = ss[-1]
        pos = lastpos + len(last_s)
        ss.append((pos, s+b'\0'))
        return pos
    return existing


j = json.load(open('schedule.json'))

def str_id_bits(ss):
    max_n = ss[-1][0]
    b = math.ceil(math.log2(max_n))
    return b

def tobits(num, b):
    bits = []
    for i in reversed(range(b)):
        n = 1<<i;
        if (num & n) > 0:
            bits.append(1)
        else:
            bits.append(0)
    return bits

def compact(ibits):
    bits = ibits.copy()
    bytes_ = []
    while len(bits) % 8 != 0:
        bits.append(0)
    while bits:
        chunk, bits = bits[0:8], bits[8:]
        t = 0
        for i in range(8):
            t = (t << 1) | chunk[i]
        bytes_.append(t)
    return bytes(bytes_)

earliest = None

def parsedate(d):
    return datetime.strptime(d, '%Y-%m-%d %H:%M:%S')

def prep_event(title, venue, name, pronouns, cost, description):
    global descs
    addstr(title, strings)
    addstr(venue, strings)
    addstr(name, strings)
    addstr(pronouns, strings)
    addstr(cost, strings)
    descs.append(description)

def make_event(f, title, venue, name, pronouns, cost, time, duration, type_, can_record, descpage, desc):
    title = getstr(title, strings)
    venue = getstr(venue, strings)
    name = getstr(name, strings)
    pronouns = getstr(pronouns, strings)
    cost = getstr(cost, strings)
    desc = getstr(desc, descr_str[descpage])
    can_record_i = 0
    if can_record:
        can_record_i = 1
    l = 2
    f.write(bytes([(type_ << 6) | (can_record_i << 5) | ((time>>8) & 0x1f), time & 0xff]))
    l += 1
    f.write(bytes([duration]))
    b = str_id_bits(strings)
    bits = [0] # filter bit is 0 to start
    bits.extend(tobits(title, b))
    bits.extend(tobits(venue, b))
    bits.extend(tobits(name, b))
    bits.extend(tobits(pronouns, b))
    bits.extend(tobits(cost, b))
    bits.extend(tobits(descpage, descr_page_bits))
    bits.extend(tobits(desc, descr_bits))
    bytes_ = compact(bits)
    l += len(bytes_)
    f.write(bytes_)

def type_id(s):
    return {
        'talk': 0,
        'performance': 1,
        'workshop': 2,
        'youth workshop': 3,
    }.get(s.lower(), 0)

def ltree_seq():
    block = 0
    while True:
        prefix = ([1] * block) + [0]
        yield prefix + [0, 0]
        yield prefix + [0, 1]
        yield prefix + [1, 0, 0]
        yield prefix + [1, 0, 1]
        yield prefix + [1, 1, 0]
        yield prefix + [1, 1, 1]
        block += 1

def analyse_strings(ss):
    chars = {'\0':0}
    for s in ss:
        chars['\0'] += 1
        for c in s:
            if c not in chars:
                chars[c] = 0
            chars[c] += 1
    ordered_chars = [a[0] for a in sorted([(k,v) for k,v in chars.items()], key=lambda a: -a[1])]
    n_chars = len(ordered_chars)
    lut = {c: enc for c, enc in zip(ordered_chars, ltree_seq())}
    return lut

def compress(s, lut):
    out = []
    for c in s:
        out.extend(lut.get(c))
    out.extend(lut.get('\0'))
    return compact(out)

with open("evlist.bin", 'wb+') as f:

    sorted_evs = sorted(j, key=lambda e: parsedate(e.get('start_date')))
    all_strings = []
    exceptions = '£'
    ignored = '\r'
    for ev in sorted_evs:
        for s in ['title', 'venue', 'speaker', 'pronouns', 'cost', 'description']:
            x = ev.get(s, '')
            if x is None:
                x = ''
            x2 = ''.join([
                unidecode(c) if c not in exceptions else c
                for c in x if c not in ignored
            ])
            ev[s] = x2
            all_strings.append(x2)
    lut = analyse_strings(all_strings)

    dlens = []
    for ev in sorted_evs:
        dlens.append(len(ev.get('description','')))
        i = lambda n: compress(ev.get(n), lut)
        prep_event(i('title'), i('venue'), i('speaker'), i('pronouns'), i('cost'), i('description'))
        st = parsedate(ev.get('start_date'))
        if earliest is None or st < earliest:
            earliest = st
    dlens = sorted(dlens)

    total_desc_len = sum(len(s) for s in descs)
    descr_bits = 14
    max_part_size = 12000
    n_parts = math.ceil(total_desc_len / max_part_size)

    part_starts = {0:0}
    p = 0
    for i, s in enumerate(descs):
        l = len(s)
        if (descr_lens[p] + l) > max_part_size: 
            p += 1
            part_starts[p] = i
            descr_str[p] = []
            descr_lens[p] = 0
        descr_lens[p] += l
        addstr(s, descr_str[p])

    # rewind to the start of the day of the earliest event
    earliest = earliest.replace(hour=0, minute=0, second=0, microsecond=0)

    day0 = earliest.weekday()

    num_evs = len(j)
    f.write(bytes([num_evs & 0xff, (num_evs >> 8) & 0xff]))
    bps = str_id_bits(strings)
    f.write(bytes([bps]))
    descr_page_bits = int(math.ceil( math.log2(len(descr_str)) ))
    #2+1+13+8+1+(14 * 5) + 4 + 14
    ev_size = int(math.ceil(float(((3*8) +1 + (bps * 5) + descr_page_bits + descr_bits)) / 8.0))
    print(ev_size)
    f.write(bytes([ev_size, day0, len(descr_str)]))
    maxtime = (2**time_bits)-1
    for ind, ev in enumerate(sorted_evs):
        i = lambda n: compress(ev.get(n), lut)
        type_ = type_id(ev.get('type'))
        can_record = ev.get('may_record', False)
        st = parsedate(ev.get('start_date'))
        et = parsedate(ev.get('end_date'))
        time = int((st - earliest).total_seconds()) // 60
        if time > maxtime:
            print(f"ERROR: time is too big: {time}")
        duration = int((et-st).total_seconds()) // 60
        if (duration > 255):
            duration = 0

        # get description stuff
        descpage = 0
        while (descpage+1) < len(part_starts) and part_starts[descpage+1] <= ind:
            descpage += 1
        make_event(f, i('title'), i('venue'), i('speaker'), i('pronouns'), i('cost'), time, duration, type_, can_record, descpage, i('description'))

evlen = os.path.getsize("evlist.bin")

with open("strngs.bin", 'wb+') as f:
    for (p,s) in strings:
        f.write(s)

pound_placeholder = 0xa3 #TODO this should depend on the target that this file is being built for
if target == 'ZXSPEC48':
    pound_placeholder = 0x60

lutname = 'c_lut_default.bin'
if target == 'ZXSPEC48':
    lutname = 'c_lut.bin'

with open(lutname, 'wb+') as f:
    for c in lut:
        if c == '£':
            f.write(bytes([pound_placeholder]))
        else:
            f.write(bytes([ord(c)]))

for i, ss in descr_str.items():
    with open(f"desc{i}.bin", "wb+") as f:
        for (p,s) in ss:
            f.write(s)
