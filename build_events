#!/usr/bin/env python3
import math
from datetime import datetime
import json
import os
import sys

strings = [
    (0, b'\0')
]

descr_str = {
}

time_bits = 13

def getstr(s, ss):
    for i, es in ss:
        if s+b'\0' == es:
            return i
    assert False, f"String not found: {s}"

def maybegetstr(s, ss):
    for i, es in ss:
        if s+b'\0' == es:
            return i
    return None

def addstr(s, ss):
    if len(ss) == 0:
        ss.append((0, s+b'\0'))
        return 0
    existing = maybegetstr(s, ss)
    if existing is None:
        lastpos, last_s = ss[-1]
        pos = lastpos + len(last_s)
        ss.append((pos, s+b'\0'))
        return pos
    return existing


j = json.load(open('schedule.json'))

def str_id_bits(ss):
    max_n = ss[-1][0]
    b = math.ceil(math.log2(max_n))
    return b

def tobits(num, b):
    bits = []
    for i in reversed(range(b)):
        n = 1<<i;
        if (num & n) > 0:
            bits.append(1)
        else:
            bits.append(0)
    return bits

def compact(ibits):
    bits = ibits.copy()
    bytes_ = []
    while len(bits) % 8 != 0:
        bits.append(0)
    while bits:
        chunk, bits = bits[0:8], bits[8:]
        t = 0
        for i in range(8):
            t = (t << 1) | chunk[i]
        bytes_.append(t)
    return bytes(bytes_)

earliest = None

def parsedate(d):
    return datetime.strptime(d, '%Y-%m-%d %H:%M:%S')

def prep_event(title, venue, name, pronouns, cost):
    title = addstr(title, strings)
    venue = addstr(venue, strings)
    name = addstr(name, strings)
    pronouns = addstr(pronouns, strings)
    cost = addstr(cost, strings)

def make_event(f, title, venue, name, pronouns, cost, time, duration, type_, can_record):
    title = getstr(title, strings)
    venue = getstr(venue, strings)
    name = getstr(name, strings)
    pronouns = getstr(pronouns, strings)
    cost = getstr(cost, strings)
    can_record_i = 0
    if can_record:
        can_record_i = 1
    l = 2
    f.write(bytes([(type_ << 6) | (can_record_i << 5) | ((time>>8) & 0x1f), time & 0xff]))
    l += 1
    f.write(bytes([duration]))
    b = str_id_bits(strings)
    bits = []
    bits.extend(tobits(title, b))
    bits.extend(tobits(venue, b))
    bits.extend(tobits(name, b))
    bits.extend(tobits(pronouns, b))
    bits.extend(tobits(cost, b))
    bytes_ = compact(bits)
    l += len(bytes_)
    f.write(bytes_)
    l += 2
    f.write(bytes([0,0])) # a bit of padding for the description pointer, currently ignored

def type_id(s):
    return {
        'talk': 0,
        'performance': 1,
        'workshop': 2,
        'youth workshop': 3,
    }.get(s.lower(), 0)

with open("evlist.bin", 'wb+') as f:
    for ev in j:
        i = lambda n: str(ev.get(n,'')).encode()
        prep_event(i('title'), i('venue'), i('speaker'), i('pronouns'), i('cost'))
        st = parsedate(ev.get('start_date'))
        if earliest is None or st < earliest:
            earliest = st

    # rewind to the start of the day of the earliest event
    earliest = earliest.replace(hour=0, minute=0, second=0, microsecond=0)

    day0 = earliest.weekday()

    num_evs = len(j)
    f.write(bytes([num_evs & 0xff, (num_evs >> 8) & 0xff]))
    bps = str_id_bits(strings)
    f.write(bytes([bps]))
    ev_size = int(math.ceil(float(((3*8) + (bps * 5))) / 8.0))+2#TODO +2 is fudge for description currently missing
    f.write(bytes([ev_size]))
    f.write(bytes([day0]))
    maxtime = (2**time_bits)-1
    for ev in sorted(j, key=lambda e: parsedate(e.get('start_date'))):
        i = lambda n: str(ev.get(n,'')).encode()
        type_ = type_id(ev.get('type'))
        can_record = ev.get('may_record', False)
        st = parsedate(ev.get('start_date'))
        et = parsedate(ev.get('end_date'))
        time = int((st - earliest).total_seconds()) // 60
        if time > maxtime:
            print(f"ERROR: time is too big: {time}")
        duration = int((et-st).total_seconds()) // 60
        if (duration > 255):
            duration = 0
        make_event(f, i('title'), i('venue'), i('speaker'), i('pronouns'), i('cost'), time, duration, type_, can_record)

evlen = os.path.getsize("evlist.bin")

strstart = 0x9000+evlen

with open("strngs.bin", 'wb+') as f:
    for (p,s) in strings:
        f.write(s)

if len(sys.argv) > 1:
    print(sys.argv[1])
    for (i,s) in strings:
        if s.startswith(sys.argv[1].encode()):
            print(f"{s} starts at {hex(strstart)} + {hex(i)} = {hex(i+strstart)}")
